version: '3.1'

volumes:
    prometheus_data: {}
    grafana_data: {}

networks:
  front-end-network:
  back-end-network:

db:
  # Note you cannot scale if you use container_name
  container_name: kmonitor-db
  image: kartoza/postgis:9.6-2.4
  volumes:
    #- ./pg/postgres_data:/var/lib/postgresql
    - ./backups:/backups
    - ./sql:/sql
  environment:
    - USERNAME=docker
    - PASS=docker
  restart: unless-stopped
#  Uncomment the next line to have an access with PGAdmin using localhost and port 25432 on your computer.
#  Only for development !
#  ports:
#    - "25432:5432"

uwsgi:
  # Note you cannot scale if you use container_name
  container_name: kmonitor-uwsgi
  build: docker
  hostname: uwsgi
  environment:
    - DATABASE_NAME=gis
    - DATABASE_USERNAME=docker
    - DATABASE_PASSWORD=docker
    - DATABASE_HOST=db
    - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
    - VIRTUAL_HOST=reptile.kartoza.com
    - VIRTUAL_PORT=8080
  volumes:
    - ../../kartoza-monitoring:/home/web/django_project
    - ./static:/home/web/static:rw
    - ./media:/home/web/media:rw
    - ./logs:/var/log/
  links:
    - db:db
  restart: on-failure:5
  user: root

# This is normally the main entry point for a production server
web:
  # Note you cannot scale if you use container_name
  container_name: kmonitor-web
  image: nginx
  hostname: nginx
  volumes:
    - ./sites-enabled:/etc/nginx/conf.d:ro
    # I dont use volumes_from as I want to use the ro modifier
    - ./static:/home/web/static:ro
    - ./media:/home/web/media:ro
    - ./logs:/var/log/nginx
  links:
    - uwsgi:uwsgi
  restart: unless-stopped

# This is the entry point for a development server.
# Run with --no-deps to run attached to the services
# from produ environment if wanted
devweb:
  # Note you cannot scale if you use container_name
  container_name: kmonitor-dev-web
  build: docker
  dockerfile: Dockerfile-dev
  hostname: uwsgi
  environment:
    - DATABASE_NAME=gis
    - DATABASE_USERNAME=docker
    - DATABASE_PASSWORD=docker
    - DATABASE_HOST=db
    - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
    - PYTHONPATH=/home/web/django_project
    - VIRTUAL_HOST=reptile.kartoza.com
    - VIRTUAL_PORT=8080
  volumes:
    - ../../kartoza-monitor:/home/web/django_project
    - ./static:/home/web/static
    - ./media:/home/web/media
    - ./logs:/var/log/
  links:
    - db:db
  ports:
    # for django test server
    - "55400:8080"
    # for ssh
    - "55600:22"

services:

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.1.0
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - back-tier
    restart: always
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}

  node-exporter:
    container_name: node_exporter
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}
  cadvisor:
    container_name: cadvisor
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global

  grafana:
    container_name: grafana
    image: grafana/grafana
    user: "104"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-end-network
      - front-end-network
    restart: always

